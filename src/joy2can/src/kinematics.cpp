#include <chrono>
#include <functional>
#include <memory>
#include <string>
#include <unistd.h>

#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include "std_msgs/msg/float32_multi_array.hpp"
#include "sensor_msgs/msg/joy.hpp"

#include "canbus.h"
#include "kinematicsCalculations.h"

using namespace std::chrono_literals;
using std::placeholders::_1;

class Kinematics : public rclcpp::Node
{
  public:
    Kinematics()
    : Node("kinematics"), can(new CANbus)
    {
      // Subscriber
      subscription_ = this->create_subscription<sensor_msgs::msg::Joy>(
      "joy", 10, std::bind(&Kinematics::topic_callback, this, _1));

      RCLCPP_INFO(this->get_logger(), "Subscribed to joy topic");
    
      // Publisher
      publisher_ = this->create_publisher<std_msgs::msg::Float32MultiArray>("motor_sp", 10);

      RCLCPP_INFO(this->get_logger(), "Publishing to motor_sp topic");
    }

    ~Kinematics()
    {
        delete can;
    }

  private:
    void topic_callback(const sensor_msgs::msg::Joy::SharedPtr input)
    {
        float xC[] = {50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0,-4.5924e-15,-25.652,-48.209,-64.952,-73.861,-73.861,-64.952,-48.209,-25.652,-4.5924e-15,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0,-4.5924e-15,-25.652,-48.209,-64.952,-73.861,-73.861,-64.952,-48.209,-25.652,-4.5924e-15,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0,-4.5924e-15,-25.652,-48.209,-64.952,-73.861,-73.861,-64.952,-48.209,-25.652,-4.5924e-15,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0,-4.5924e-15,-25.652,-48.209,-64.952,-73.861,-73.861,-64.952,-48.209,-25.652,-4.5924e-15,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0,-4.5924e-15,-25.652,-48.209,-64.952,-73.861,-73.861,-64.952,-48.209,-25.652,-4.5924e-15,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0,-4.5924e-15,-25.652,-48.209,-64.952,-73.861,-73.861,-64.952,-48.209,-25.652,-4.5924e-15,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500,1550,1600,1650,1700,1750,1800,1850,1900,1950,2000,2050,2100,2150,2200,2250,2300,2350,2350,2375.7,2398.2,2415,2423.9,2423.9,2415,2398.2,2375.7,2350,2300,2250,2200,2150,2100,2050,2000,1950,1900,1850,1800,1750,1700,1650,1600,1550,1500,1450,1400,1350,1300,1250,1200,1150,1100,1050,1000,950,900,850,800,750,700,650,600,550,500,450,400,350,300,250,200,150,100,50,0};
        float zC[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.5231,17.547,37.5,61.976,88.024,112.5,132.45,145.48,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,154.52,167.55,187.5,211.98,238.02,262.5,282.45,295.48,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,304.52,317.55,337.5,361.98,388.02,412.5,432.45,445.48,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,454.52,467.55,487.5,511.98,538.02,562.5,582.45,595.48,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,600,604.52,617.55,637.5,661.98,688.02,712.5,732.45,745.48,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,750,754.52,767.55,787.5,811.98,838.02,862.5,882.45,895.48,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,900,904.52,917.55,937.5,961.98,988.02,1012.5,1032.5,1045.5,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1054.5,1067.5,1087.5,1112,1138,1162.5,1182.5,1195.5,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1204.5,1217.5,1237.5,1262,1288,1312.5,1332.5,1345.5,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1350,1354.5,1367.5,1387.5,1412,1438,1462.5,1482.5,1495.5,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1500,1504.5,1517.5,1537.5,1562,1588,1612.5,1632.5,1645.5,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1650,1654.5,1667.5,1687.5,1712,1738,1762.5,1782.5,1795.5,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1800,1804.5,1817.5,1837.5,1862,1888,1912.5,1932.5,1945.5,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950,1950};

        if(input->buttons[10] == 1.0)
        {
            kinematicsCalc.parked = true;
        }

        if(input->buttons[10] && input->buttons[4])
        {
            kinematicsCalc.parked = false;
        }

        if(!kinematicsCalc.parked)
        {
            if(input->buttons[9] && input->buttons[5])
            {
            kinematicsCalc.pathMode = true;
            }

            if(kinematicsCalc.pathMode == true)
            {
                
                for (int i = 0; i < 788; i++)
                {
                    //RCLCPP_INFO(this->get_logger(), "\n Path mode");
                    kinematicsCalc.px = xC[i];
                    kinematicsCalc.pz = zC[i];

                    kinematicsCalc.calculate();
                    std_msgs::msg::Float32MultiArray output;
                    output.data.resize(4);
                    output.data[0] = kinematicsCalc.setpointL;
                    output.data[1] = kinematicsCalc.setpointR;
                    output.data[2] = kinematicsCalc.px;
                    output.data[3] = kinematicsCalc.pz;
                    // ROS publisher
                    publisher_->publish(output);
                    usleep(100000);
                }
                
            }else{

            if (input->axes[0] < -0.1 && kinematicsCalc.px < kinematicsCalc.c)
            {
                kinematicsCalc.px = kinematicsCalc.px + 10;
            }else if (input->axes[0] > 0.1 && kinematicsCalc.px > 0)
            {
                kinematicsCalc.px = kinematicsCalc.px - 10; 
            }

            if (input->axes[1] < -0.1)
            {
                kinematicsCalc.pz = kinematicsCalc.pz + 10;
            }else if (input->axes[1] > 0.1 && kinematicsCalc.pz > 0)
            {
                kinematicsCalc.pz = kinematicsCalc.pz - 10;
            }

            if(input->buttons[0] == 1.0)
            {
                kinematicsCalc.px = 0.0;
                kinematicsCalc.pz = 0.0;
            }else if (input->buttons[1] == 1.0)
            {
                kinematicsCalc.px = 1000;
                kinematicsCalc.pz = 500;
            }
            
            kinematicsCalc.calculate();
            std_msgs::msg::Float32MultiArray output;
            output.data.resize(4);
            output.data[0] = kinematicsCalc.setpointL;
            output.data[1] = kinematicsCalc.setpointR;
            output.data[2] = kinematicsCalc.px;
            output.data[3] = kinematicsCalc.pz;
        
            //RCLCPP_INFO(this->get_logger(), "\n setpointL: %f", kinematicsCalc.setpointL);

            // ROS publisher
            publisher_->publish(output);

            // CAN publisher - commented out for now, but keeping it in case it becomes needed
            //can->send_data(can_ps4_output);
            }
        }else{
            RCLCPP_INFO(this->get_logger(), "\n System parked.");
        }
    }
    CANbus* can;
    KinematicsCalculations kinematicsCalc;
    rclcpp::TimerBase::SharedPtr timer_;
    rclcpp::Publisher<std_msgs::msg::Float32MultiArray>::SharedPtr publisher_;
    rclcpp::Subscription<sensor_msgs::msg::Joy>::SharedPtr subscription_;
};

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<Kinematics>());
  rclcpp::shutdown();
  return 0;
}